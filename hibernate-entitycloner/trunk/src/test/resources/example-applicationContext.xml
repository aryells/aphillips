<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util" 
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">
  
  <bean id="entityGraphClonerFactory"
      class="com.qrmedia.commons.persistence.hibernate.clone.HibernateEntityGraphClonerFactory">
    <lookup-method name="newInstance" bean="entityGraphCloner" />
  </bean>
  
  <!-- must be prototype since this is stateful - multiple services concurrently using 
    entityGraphCloners must receive separate instances -->
  <bean id="entityGraphCloner" class="com.qrmedia.commons.persistence.hibernate.clone.HibernateEntityGraphCloner"
    scope="prototype" autowire="byType" />
    
  <!-- defining these as anonymous inner beans in the prototype seems to mean that they *also* 
    have prototype scope, when in fact they are stateless and may be shared -->
  <bean id="entityBeanCloner" class="com.qrmedia.commons.persistence.hibernate.clone.HibernateEntityBeanCloner">
    <property name="propertyCloners">
      <util:list>
        <bean class="com.qrmedia.commons.persistence.hibernate.clone.property.SimplePropertyCloner" />
        <bean class="com.qrmedia.commons.persistence.hibernate.clone.property.SimpleCollectionCloner" />
        
        <!--  catch-all cloner for collections -->
        <bean class="com.qrmedia.commons.persistence.hibernate.clone.property.DelegatingCollectionCloner" />
        
        <!-- certain collections are *also* Cloneable, so this cloner needs to be run *after* all 
          other cloners that are supposed to process collections -->
        <bean class="com.qrmedia.commons.persistence.hibernate.clone.property.CloneablePropertyCloner" />
        <!--  catch-all cloner -->
        <bean class="com.qrmedia.commons.persistence.hibernate.clone.property.DelegatingPropertyCloner" />
      </util:list>
    </property>
  </bean>
    
  <bean id="sessionFactory"
      class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" autowire="byType">
    <property name="annotatedClasses">
      <list>
        <value>com.qrmedia.commons.persistence.hibernate.clone.example.domain.Owner</value>
        <value>com.qrmedia.commons.persistence.hibernate.clone.example.domain.Pet</value>
        <value>com.qrmedia.commons.persistence.hibernate.clone.example.domain.Toy</value>
      </list>
    </property>
  </bean>
  
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>jdbc.properties</value>
        <value>hibernate.properties</value>        
      </list>
    </property>

    <!-- some placeholders are resovled by additional property configurers in different contexts -->
    <property name="ignoreUnresolvablePlaceholders" value="true"/>
  </bean>
 
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driverClassName}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
  </bean>
  
  <!-- transaction manager for non-JTA resources -->
  <bean id="transactionManager" 
    class="org.springframework.orm.hibernate3.HibernateTransactionManager" 
    autowire="byType" />
</beans>